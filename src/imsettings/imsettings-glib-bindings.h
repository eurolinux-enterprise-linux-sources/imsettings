/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_com_redhat_imsettings
#define DBUS_GLIB_CLIENT_WRAPPERS_com_redhat_imsettings

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_get_version (DBusGProxy *proxy, guint* OUT_version, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetVersion", error, G_TYPE_INVALID, G_TYPE_UINT, OUT_version, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_get_version_reply) (DBusGProxy *proxy, guint OUT_version, GError *error, gpointer userdata);

static void
com_redhat_imsettings_get_version_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_version;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_version, G_TYPE_INVALID);
  (*(com_redhat_imsettings_get_version_reply)data->cb) (proxy, OUT_version, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_get_version_async (DBusGProxy *proxy, com_redhat_imsettings_get_version_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetVersion", com_redhat_imsettings_get_version_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_get_info_objects (DBusGProxy *proxy, const char * IN_lang, GPtrArray** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetInfoObjects", error, G_TYPE_STRING, IN_lang, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_UINT, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), G_TYPE_INVALID)), OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_get_info_objects_reply) (DBusGProxy *proxy, GPtrArray *OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_get_info_objects_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_UINT, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), G_TYPE_INVALID)), &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_get_info_objects_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_get_info_objects_async (DBusGProxy *proxy, const char * IN_lang, com_redhat_imsettings_get_info_objects_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetInfoObjects", com_redhat_imsettings_get_info_objects_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_lang, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_get_info_object (DBusGProxy *proxy, const char * IN_lang, const char * IN_name, GValueArray** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetInfoObject", error, G_TYPE_STRING, IN_lang, G_TYPE_STRING, IN_name, G_TYPE_INVALID, dbus_g_type_get_struct ("GValueArray", G_TYPE_UINT, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), G_TYPE_INVALID), OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_get_info_object_reply) (DBusGProxy *proxy, GValueArray *OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_get_info_object_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GValueArray* OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_struct ("GValueArray", G_TYPE_UINT, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), G_TYPE_INVALID), &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_get_info_object_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_get_info_object_async (DBusGProxy *proxy, const char * IN_lang, const char * IN_name, com_redhat_imsettings_get_info_object_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetInfoObject", com_redhat_imsettings_get_info_object_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_lang, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_get_input_method_list (DBusGProxy *proxy, const char * IN_lang, char *** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetInputMethodList", error, G_TYPE_STRING, IN_lang, G_TYPE_INVALID, G_TYPE_STRV, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_get_input_method_list_reply) (DBusGProxy *proxy, char * *OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_get_input_method_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_get_input_method_list_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_get_input_method_list_async (DBusGProxy *proxy, const char * IN_lang, com_redhat_imsettings_get_input_method_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetInputMethodList", com_redhat_imsettings_get_input_method_list_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_lang, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_get_current_user_im (DBusGProxy *proxy, char ** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCurrentUserIM", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_get_current_user_im_reply) (DBusGProxy *proxy, char * OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_get_current_user_im_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_get_current_user_im_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_get_current_user_im_async (DBusGProxy *proxy, com_redhat_imsettings_get_current_user_im_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCurrentUserIM", com_redhat_imsettings_get_current_user_im_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_get_current_system_im (DBusGProxy *proxy, char ** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCurrentSystemIM", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_get_current_system_im_reply) (DBusGProxy *proxy, char * OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_get_current_system_im_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_get_current_system_im_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_get_current_system_im_async (DBusGProxy *proxy, com_redhat_imsettings_get_current_system_im_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCurrentSystemIM", com_redhat_imsettings_get_current_system_im_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_is_system_default (DBusGProxy *proxy, const char * IN_imname, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsSystemDefault", error, G_TYPE_STRING, IN_imname, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_is_system_default_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_is_system_default_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_is_system_default_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_is_system_default_async (DBusGProxy *proxy, const char * IN_imname, com_redhat_imsettings_is_system_default_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsSystemDefault", com_redhat_imsettings_is_system_default_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_imname, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_is_user_default (DBusGProxy *proxy, const char * IN_imname, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsUserDefault", error, G_TYPE_STRING, IN_imname, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_is_user_default_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_is_user_default_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_is_user_default_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_is_user_default_async (DBusGProxy *proxy, const char * IN_imname, com_redhat_imsettings_is_user_default_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsUserDefault", com_redhat_imsettings_is_user_default_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_imname, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_is_xim (DBusGProxy *proxy, const char * IN_imname, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsXim", error, G_TYPE_STRING, IN_imname, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_is_xim_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_is_xim_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_is_xim_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_is_xim_async (DBusGProxy *proxy, const char * IN_imname, com_redhat_imsettings_is_xim_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsXim", com_redhat_imsettings_is_xim_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_imname, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_start_im (DBusGProxy *proxy, const char * IN_lang, const char * IN_module, const gboolean IN_update_xinputrc, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "StartIM", error, G_TYPE_STRING, IN_lang, G_TYPE_STRING, IN_module, G_TYPE_BOOLEAN, IN_update_xinputrc, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_start_im_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_start_im_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_start_im_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_start_im_async (DBusGProxy *proxy, const char * IN_lang, const char * IN_module, const gboolean IN_update_xinputrc, com_redhat_imsettings_start_im_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "StartIM", com_redhat_imsettings_start_im_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_lang, G_TYPE_STRING, IN_module, G_TYPE_BOOLEAN, IN_update_xinputrc, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_stop_im (DBusGProxy *proxy, const char * IN_module, const gboolean IN_update_xinputrc, const gboolean IN_force, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "StopIM", error, G_TYPE_STRING, IN_module, G_TYPE_BOOLEAN, IN_update_xinputrc, G_TYPE_BOOLEAN, IN_force, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_stop_im_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_stop_im_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_stop_im_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_stop_im_async (DBusGProxy *proxy, const char * IN_module, const gboolean IN_update_xinputrc, const gboolean IN_force, com_redhat_imsettings_stop_im_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "StopIM", com_redhat_imsettings_stop_im_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_module, G_TYPE_BOOLEAN, IN_update_xinputrc, G_TYPE_BOOLEAN, IN_force, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_redhat_imsettings_whats_input_method_running (DBusGProxy *proxy, char ** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "WhatsInputMethodRunning", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_ret, G_TYPE_INVALID);
}

typedef void (*com_redhat_imsettings_whats_input_method_running_reply) (DBusGProxy *proxy, char * OUT_ret, GError *error, gpointer userdata);

static void
com_redhat_imsettings_whats_input_method_running_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_ret, G_TYPE_INVALID);
  (*(com_redhat_imsettings_whats_input_method_running_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_redhat_imsettings_whats_input_method_running_async (DBusGProxy *proxy, com_redhat_imsettings_whats_input_method_running_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "WhatsInputMethodRunning", com_redhat_imsettings_whats_input_method_running_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_com_redhat_imsettings */

G_END_DECLS
